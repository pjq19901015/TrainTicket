package com.trainOrderService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 8/8/2013 6:27:41 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;
import com.threeh.trainticket.entity.DGTicketPrice;
import com.threeh.trainticket.entity.Train;
import com.threeh.trainticket.entity.Trains;
import com.trainOrderService.WS_Enums.*;
import com.google.gson.Gson;
import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.util.List;

public class trainOrderService {
    
    public String NAMESPACE ="http://service.train.cocoa.com";
    public String url="http://www.114piaowu.com:8043/axis2/services/trainOrderService";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public trainOrderService(){}
    
    public trainOrderService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public trainOrderService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public trainOrderService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void getRequestServerIPAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getRequestServerIPAsync(null);
    }
    
    public void getRequestServerIPAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getRequestServerIP(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getRequestServerIP", result);
                }
            }
        }.execute();
    }
    
    public String getRequestServerIP(){
        return getRequestServerIP(null);
    }
    
    public String getRequestServerIP(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","getRequestServerIP");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getRequestServerIP", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getRequestServerIP", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void setRegionInfoManagerAsync(RegionInfoManager regionInfoManager) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        setRegionInfoManagerAsync(regionInfoManager, null);
    }
    
    public void setRegionInfoManagerAsync(final RegionInfoManager regionInfoManager,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                setRegionInfoManager(regionInfoManager, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("setRegionInfoManager", result);
                }
            }
        }.execute();
    }
    
    public void setRegionInfoManager(RegionInfoManager regionInfoManager){
        setRegionInfoManager(regionInfoManager, null);
    }
    
    public void setRegionInfoManager(RegionInfoManager regionInfoManager,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","setRegionInfoManager");
        soapEnvelope.addMapping("http://service.train.cocoa.com","regionInfoManager",new RegionInfoManager().getClass());
        soapReq.addProperty("regionInfoManager",regionInfoManager);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:setRegionInfoManager", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:setRegionInfoManager", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void trainOrderSyncAsync(TrainOrder trainOrder) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        trainOrderSyncAsync(trainOrder, null);
    }
    
    public void trainOrderSyncAsync(final TrainOrder trainOrder,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return trainOrderSync(trainOrder, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("trainOrderSync", result);
                }
            }
        }.execute();
    }
    
    public String trainOrderSync(TrainOrder trainOrder){
        return trainOrderSync(trainOrder, null);
    }
    
    public String trainOrderSync(TrainOrder trainOrder,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","trainOrderSync");
        soapEnvelope.addMapping("http://service.train.cocoa.com","trainOrder",new TrainOrder().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("trainOrder",trainOrder);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:trainOrderSync", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:trainOrderSync", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getConfigUtilAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getConfigUtilAsync(null);
    }
    
    public void getConfigUtilAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getConfigUtil(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getConfigUtil", result);
                }
            }
        }.execute();
    }
    
    public void getConfigUtil(){
        getConfigUtil(null);
    }
    
    public void getConfigUtil(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","getConfigUtil");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getConfigUtil", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getConfigUtil", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void updateOrderStatusToReturnAsync(String orderId,String orderDetailIds,String returnCauseField,String returnContentField) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateOrderStatusToReturnAsync(orderId, orderDetailIds, returnCauseField, returnContentField, null);
    }
    
    public void updateOrderStatusToReturnAsync(final String orderId,final String orderDetailIds,final String returnCauseField,final String returnContentField,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return updateOrderStatusToReturn(orderId, orderDetailIds, returnCauseField, returnContentField, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateOrderStatusToReturn", result);
                }
            }
        }.execute();
    }
    
    public String updateOrderStatusToReturn(String orderId,String orderDetailIds,String returnCauseField,String returnContentField){
        return updateOrderStatusToReturn(orderId, orderDetailIds, returnCauseField, returnContentField, null);
    }
    
    public String updateOrderStatusToReturn(String orderId,String orderDetailIds,String returnCauseField,String returnContentField,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","updateOrderStatusToReturn");
        soapReq.addProperty("orderId",orderId);
        soapReq.addProperty("orderDetailIds",orderDetailIds);
        soapReq.addProperty("returnCause",returnCauseField);
        soapReq.addProperty("returnContent",returnContentField);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateOrderStatusToReturn", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateOrderStatusToReturn", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getOrderStatusByOrderIdAsync(String orderId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getOrderStatusByOrderIdAsync(orderId, null);
    }
    
    public void getOrderStatusByOrderIdAsync(final String orderId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getOrderStatusByOrderId(orderId, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getOrderStatusByOrderId", result);
                }
            }
        }.execute();
    }
    
    public String getOrderStatusByOrderId(String orderId){
        return getOrderStatusByOrderId(orderId, null);
    }
    
    public String getOrderStatusByOrderId(String orderId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","getOrderStatusByOrderId");
        soapReq.addProperty("orderId",orderId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getOrderStatusByOrderId", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getOrderStatusByOrderId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getTrainCodeAndPriceAsync(String fromStation,String toStation,String godate,String trainCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getTrainCodeAndPriceAsync(fromStation, toStation, godate, trainCode, null);
    }
    
    public void getTrainCodeAndPriceAsync(final String fromStation,final String toStation,final String godate,final String trainCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, DGTicketPrice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected DGTicketPrice doInBackground(Void... params) {
                return getTrainCodeAndPrice(fromStation, toStation, godate, trainCode, headers);
            }
            @Override
            protected void onPostExecute(DGTicketPrice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getTrainCodeAndPrice", result);
                }
            }
        }.execute();
    }
    
    public DGTicketPrice getTrainCodeAndPrice(String fromStation,String toStation,String godate,String trainCode){
        return getTrainCodeAndPrice(fromStation, toStation, godate, trainCode, null);
    }
    
    public DGTicketPrice getTrainCodeAndPrice(String fromStation,String toStation,String godate,String trainCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","getTrainCodeAndPrice");
        soapReq.addProperty("fromStation",fromStation);
        soapReq.addProperty("toStation",toStation);
        soapReq.addProperty("godate",godate);
        soapReq.addProperty("trainCode",trainCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getTrainCodeAndPrice", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getTrainCodeAndPrice", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result != null){
                    String strJson = result.getProperty(0).toString();
                    Train train = new Gson().fromJson(strJson,Train.class);
                    DGTicketPrice resultVariable =  train.getTrainCodeAndPrice();
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getRegionInfoManagerAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getRegionInfoManagerAsync(null);
    }
    
    public void getRegionInfoManagerAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, RegionInfoManager>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected RegionInfoManager doInBackground(Void... params) {
                return getRegionInfoManager(headers);
            }
            @Override
            protected void onPostExecute(RegionInfoManager result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getRegionInfoManager", result);
                }
            }
        }.execute();
    }
    
    public RegionInfoManager getRegionInfoManager(){
        return getRegionInfoManager(null);
    }
    
    public RegionInfoManager getRegionInfoManager(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","getRegionInfoManager");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getRegionInfoManager", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getRegionInfoManager", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    RegionInfoManager resultVariable =  new RegionInfoManager (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void setRequestServerIPAsync(String requestServerIP) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        setRequestServerIPAsync(requestServerIP, null);
    }
    
    public void setRequestServerIPAsync(final String requestServerIP,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                setRequestServerIP(requestServerIP, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("setRequestServerIP", result);
                }
            }
        }.execute();
    }
    
    public void setRequestServerIP(String requestServerIP){
        setRequestServerIP(requestServerIP, null);
    }
    
    public void setRequestServerIP(String requestServerIP,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","setRequestServerIP");
        soapReq.addProperty("requestServerIP",requestServerIP);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:setRequestServerIP", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:setRequestServerIP", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void updateOrderStatusToPayAsync(String orderId,String aliTradeNo,String payAccount,double price,boolean priceSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateOrderStatusToPayAsync(orderId, aliTradeNo, payAccount, price, priceSpecified, null);
    }
    
    public void updateOrderStatusToPayAsync(final String orderId,final String aliTradeNo,final String payAccount,final double price,final boolean priceSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                updateOrderStatusToPay(orderId, aliTradeNo, payAccount, price, priceSpecified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateOrderStatusToPay", result);
                }
            }
        }.execute();
    }
    
    public void updateOrderStatusToPay(String orderId,String aliTradeNo,String payAccount,double price,boolean priceSpecified){
        updateOrderStatusToPay(orderId, aliTradeNo, payAccount, price, priceSpecified, null);
    }
    
    public void updateOrderStatusToPay(String orderId,String aliTradeNo,String payAccount,double price,boolean priceSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","updateOrderStatusToPay");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("orderId",orderId);
        soapReq.addProperty("aliTradeNo",aliTradeNo);
        soapReq.addProperty("payAccount",payAccount);
        soapReq.addProperty("price",price);
        soapReq.addProperty("priceSpecified",priceSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:updateOrderStatusToPay", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:updateOrderStatusToPay", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getBatchOrderStatusAsync(String orderIds) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getBatchOrderStatusAsync(orderIds, null);
    }
    
    public void getBatchOrderStatusAsync(final String orderIds,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getBatchOrderStatus(orderIds, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getBatchOrderStatus", result);
                }
            }
        }.execute();
    }
    
    public String getBatchOrderStatus(String orderIds){
        return getBatchOrderStatus(orderIds, null);
    }
    
    public String getBatchOrderStatus(String orderIds,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","getBatchOrderStatus");
        soapReq.addProperty("orderIds",orderIds);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getBatchOrderStatus", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getBatchOrderStatus", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void setConfigUtilAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        setConfigUtilAsync(null);
    }
    
    public void setConfigUtilAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                setConfigUtil(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("setConfigUtil", result);
                }
            }
        }.execute();
    }
    
    public void setConfigUtil(){
        setConfigUtil(null);
    }
    
    public void setConfigUtil(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","setConfigUtil");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:setConfigUtil", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:setConfigUtil", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void sendFeedBackAsync(String feedbackDesc) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendFeedBackAsync(feedbackDesc, null);
    }
    
    public void sendFeedBackAsync(final String feedbackDesc,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return sendFeedBack(feedbackDesc, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendFeedBack", result);
                }
            }
        }.execute();
    }
    
    public String sendFeedBack(String feedbackDesc){
        return sendFeedBack(feedbackDesc, null);
    }
    
    public String sendFeedBack(String feedbackDesc,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","sendFeedBack");
        soapReq.addProperty("feedbackDesc",feedbackDesc);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:sendFeedBack", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:sendFeedBack", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void getAllTrainCodeAndPriceAsync(String fromStation,String toStation,String godate) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getAllTrainCodeAndPriceAsync(fromStation, toStation, godate, null);
    }
    
    public void getAllTrainCodeAndPriceAsync(final String fromStation,final String toStation,final String godate,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Trains>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Trains doInBackground(Void... params) {
                return getAllTrainCodeAndPrice(fromStation, toStation, godate, headers);
            }
            @Override
            protected void onPostExecute(Trains result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getAllTrainCodeAndPrice", result);
                }
            }
        }.execute();
    }
    
    public Trains getAllTrainCodeAndPrice(String fromStation,String toStation,String godate){
        return getAllTrainCodeAndPrice(fromStation, toStation, godate, null);
    }
    
    public Trains getAllTrainCodeAndPrice(String fromStation,String toStation,String godate,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","getAllTrainCodeAndPrice");
        soapReq.addProperty("fromStation",fromStation);
        soapReq.addProperty("toStation",toStation);
        soapReq.addProperty("godate",godate);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getAllTrainCodeAndPrice", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getAllTrainCodeAndPrice", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    String strJson = result.getProperty(0).toString();
                    Trains resultVariable = new Gson().fromJson(strJson,Trains.class);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getBatchOrderDetailStatusAsync(String orderDetailIds) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getBatchOrderDetailStatusAsync(orderDetailIds, null);
    }
    
    public void getBatchOrderDetailStatusAsync(final String orderDetailIds,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getBatchOrderDetailStatus(orderDetailIds, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getBatchOrderDetailStatus", result);
                }
            }
        }.execute();
    }
    
    public String getBatchOrderDetailStatus(String orderDetailIds){
        return getBatchOrderDetailStatus(orderDetailIds, null);
    }
    
    public String getBatchOrderDetailStatus(String orderDetailIds,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://service.train.cocoa.com","getBatchOrderDetailStatus");
        soapReq.addProperty("orderDetailIds",orderDetailIds);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("urn:getBatchOrderDetailStatus", soapEnvelope,headers);
            }else{
                httpTransport.call("urn:getBatchOrderDetailStatus", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
}
