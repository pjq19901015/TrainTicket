package com.trainOrderService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 8/8/2013 6:27:41 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class TrainOrder implements KvmSerializable {
    
    public int agentId;
    public boolean agentIdSpecified;
    public int agentOrderId;
    public boolean agentOrderIdSpecified;
    public String aliTradeNo;
    public String endStation;
    public int expPrice;
    public boolean expPriceSpecified;
    public int finaStatus;
    public boolean finaStatusSpecified;
    public String openBank;
    public String orderCity;
    public String orderHeadCode;
    public int orderId;
    public boolean orderIdSpecified;
    public String orderProvince;
    public int orderStatus;
    public boolean orderStatusSpecified;
    public String orderStreet;
    public String ordercounty;
    public String payAccount;
    public String payDateTime;
    public int payType;
    public boolean payTypeSpecified;
    public String postAddress;
    public int postType;
    public boolean postTypeSpecified;
    public double refundAmount;
    public boolean refundAmountSpecified;
    public int refundTickets;
    public boolean refundTicketsSpecified;
    public String seatType;
    public String startStation;
    public double totalAmount;
    public boolean totalAmountSpecified;
    public int totalTickets;
    public boolean totalTicketsSpecified;
    public String trainCode;
    public VectorTrainOrderDetail trainOrderDetail;
    public String trainStartTime;
    public double transactionFee;
    public boolean transactionFeeSpecified;
    public String userEmail;
    public String userMobile;
    public String userName;
    
    public TrainOrder(){}
    
    public TrainOrder(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("agentId"))
        {
            Object obj = soapObject.getProperty("agentId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agentId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                agentId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("agentIdSpecified"))
        {
            Object obj = soapObject.getProperty("agentIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agentIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                agentIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("agentOrderId"))
        {
            Object obj = soapObject.getProperty("agentOrderId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agentOrderId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                agentOrderId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("agentOrderIdSpecified"))
        {
            Object obj = soapObject.getProperty("agentOrderIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agentOrderIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                agentOrderIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("aliTradeNo"))
        {
            Object obj = soapObject.getProperty("aliTradeNo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                aliTradeNo = j.toString();
            }else if (obj!= null && obj instanceof String){
                aliTradeNo = (String) obj;
            }
        }
        if (soapObject.hasProperty("endStation"))
        {
            Object obj = soapObject.getProperty("endStation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                endStation = j.toString();
            }else if (obj!= null && obj instanceof String){
                endStation = (String) obj;
            }
        }
        if (soapObject.hasProperty("expPrice"))
        {
            Object obj = soapObject.getProperty("expPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                expPrice = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                expPrice = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("expPriceSpecified"))
        {
            Object obj = soapObject.getProperty("expPriceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                expPriceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                expPriceSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("finaStatus"))
        {
            Object obj = soapObject.getProperty("finaStatus");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                finaStatus = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                finaStatus = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("finaStatusSpecified"))
        {
            Object obj = soapObject.getProperty("finaStatusSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                finaStatusSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                finaStatusSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("openBank"))
        {
            Object obj = soapObject.getProperty("openBank");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                openBank = j.toString();
            }else if (obj!= null && obj instanceof String){
                openBank = (String) obj;
            }
        }
        if (soapObject.hasProperty("orderCity"))
        {
            Object obj = soapObject.getProperty("orderCity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderCity = j.toString();
            }else if (obj!= null && obj instanceof String){
                orderCity = (String) obj;
            }
        }
        if (soapObject.hasProperty("orderHeadCode"))
        {
            Object obj = soapObject.getProperty("orderHeadCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderHeadCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                orderHeadCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("orderId"))
        {
            Object obj = soapObject.getProperty("orderId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                orderId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("orderIdSpecified"))
        {
            Object obj = soapObject.getProperty("orderIdSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderIdSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                orderIdSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("orderProvince"))
        {
            Object obj = soapObject.getProperty("orderProvince");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderProvince = j.toString();
            }else if (obj!= null && obj instanceof String){
                orderProvince = (String) obj;
            }
        }
        if (soapObject.hasProperty("orderStatus"))
        {
            Object obj = soapObject.getProperty("orderStatus");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderStatus = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                orderStatus = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("orderStatusSpecified"))
        {
            Object obj = soapObject.getProperty("orderStatusSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderStatusSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                orderStatusSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("orderStreet"))
        {
            Object obj = soapObject.getProperty("orderStreet");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                orderStreet = j.toString();
            }else if (obj!= null && obj instanceof String){
                orderStreet = (String) obj;
            }
        }
        if (soapObject.hasProperty("ordercounty"))
        {
            Object obj = soapObject.getProperty("ordercounty");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ordercounty = j.toString();
            }else if (obj!= null && obj instanceof String){
                ordercounty = (String) obj;
            }
        }
        if (soapObject.hasProperty("payAccount"))
        {
            Object obj = soapObject.getProperty("payAccount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                payAccount = j.toString();
            }else if (obj!= null && obj instanceof String){
                payAccount = (String) obj;
            }
        }
        if (soapObject.hasProperty("payDateTime"))
        {
            Object obj = soapObject.getProperty("payDateTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                payDateTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                payDateTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("payType"))
        {
            Object obj = soapObject.getProperty("payType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                payType = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                payType = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("payTypeSpecified"))
        {
            Object obj = soapObject.getProperty("payTypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                payTypeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                payTypeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("postAddress"))
        {
            Object obj = soapObject.getProperty("postAddress");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                postAddress = j.toString();
            }else if (obj!= null && obj instanceof String){
                postAddress = (String) obj;
            }
        }
        if (soapObject.hasProperty("postType"))
        {
            Object obj = soapObject.getProperty("postType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                postType = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                postType = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("postTypeSpecified"))
        {
            Object obj = soapObject.getProperty("postTypeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                postTypeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                postTypeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("refundAmount"))
        {
            Object obj = soapObject.getProperty("refundAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                refundAmount = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                refundAmount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("refundAmountSpecified"))
        {
            Object obj = soapObject.getProperty("refundAmountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                refundAmountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                refundAmountSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("refundTickets"))
        {
            Object obj = soapObject.getProperty("refundTickets");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                refundTickets = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                refundTickets = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("refundTicketsSpecified"))
        {
            Object obj = soapObject.getProperty("refundTicketsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                refundTicketsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                refundTicketsSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("seatType"))
        {
            Object obj = soapObject.getProperty("seatType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                seatType = j.toString();
            }else if (obj!= null && obj instanceof String){
                seatType = (String) obj;
            }
        }
        if (soapObject.hasProperty("startStation"))
        {
            Object obj = soapObject.getProperty("startStation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                startStation = j.toString();
            }else if (obj!= null && obj instanceof String){
                startStation = (String) obj;
            }
        }
        if (soapObject.hasProperty("totalAmount"))
        {
            Object obj = soapObject.getProperty("totalAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalAmount = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalAmount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("totalAmountSpecified"))
        {
            Object obj = soapObject.getProperty("totalAmountSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalAmountSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalAmountSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("totalTickets"))
        {
            Object obj = soapObject.getProperty("totalTickets");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalTickets = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalTickets = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("totalTicketsSpecified"))
        {
            Object obj = soapObject.getProperty("totalTicketsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalTicketsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalTicketsSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("trainCode"))
        {
            Object obj = soapObject.getProperty("trainCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                trainCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                trainCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("trainOrderDetail"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("trainOrderDetail");
            trainOrderDetail = new VectorTrainOrderDetail(j);
        }
        if (soapObject.hasProperty("trainStartTime"))
        {
            Object obj = soapObject.getProperty("trainStartTime");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                trainStartTime = j.toString();
            }else if (obj!= null && obj instanceof String){
                trainStartTime = (String) obj;
            }
        }
        if (soapObject.hasProperty("transactionFee"))
        {
            Object obj = soapObject.getProperty("transactionFee");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                transactionFee = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                transactionFee = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("transactionFeeSpecified"))
        {
            Object obj = soapObject.getProperty("transactionFeeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                transactionFeeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                transactionFeeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("userEmail"))
        {
            Object obj = soapObject.getProperty("userEmail");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                userEmail = j.toString();
            }else if (obj!= null && obj instanceof String){
                userEmail = (String) obj;
            }
        }
        if (soapObject.hasProperty("userMobile"))
        {
            Object obj = soapObject.getProperty("userMobile");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                userMobile = j.toString();
            }else if (obj!= null && obj instanceof String){
                userMobile = (String) obj;
            }
        }
        if (soapObject.hasProperty("userName"))
        {
            Object obj = soapObject.getProperty("userName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                userName = j.toString();
            }else if (obj!= null && obj instanceof String){
                userName = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return agentId;
            case 1:
                return agentIdSpecified;
            case 2:
                return agentOrderId;
            case 3:
                return agentOrderIdSpecified;
            case 4:
                return aliTradeNo;
            case 5:
                return endStation;
            case 6:
                return expPrice;
            case 7:
                return expPriceSpecified;
            case 8:
                return finaStatus;
            case 9:
                return finaStatusSpecified;
            case 10:
                return openBank;
            case 11:
                return orderCity;
            case 12:
                return orderHeadCode;
            case 13:
                return orderId;
            case 14:
                return orderIdSpecified;
            case 15:
                return orderProvince;
            case 16:
                return orderStatus;
            case 17:
                return orderStatusSpecified;
            case 18:
                return orderStreet;
            case 19:
                return ordercounty;
            case 20:
                return payAccount;
            case 21:
                return payDateTime;
            case 22:
                return payType;
            case 23:
                return payTypeSpecified;
            case 24:
                return postAddress;
            case 25:
                return postType;
            case 26:
                return postTypeSpecified;
            case 27:
                return refundAmount;
            case 28:
                return refundAmountSpecified;
            case 29:
                return refundTickets;
            case 30:
                return refundTicketsSpecified;
            case 31:
                return seatType;
            case 32:
                return startStation;
            case 33:
                return totalAmount;
            case 34:
                return totalAmountSpecified;
            case 35:
                return totalTickets;
            case 36:
                return totalTicketsSpecified;
            case 37:
                return trainCode;
            case 38:
                return trainOrderDetail;
            case 39:
                return trainStartTime;
            case 40:
                return transactionFee;
            case 41:
                return transactionFeeSpecified;
            case 42:
                return userEmail;
            case 43:
                return userMobile;
            case 44:
                return userName;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 45;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "agentId";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "agentIdSpecified";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "agentOrderId";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "agentOrderIdSpecified";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "aliTradeNo";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "endStation";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "expPrice";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "expPriceSpecified";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "finaStatus";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "finaStatusSpecified";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "openBank";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "orderCity";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "orderHeadCode";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "orderId";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "orderIdSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "orderProvince";
                break;
            case 16:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "orderStatus";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "orderStatusSpecified";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "orderStreet";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ordercounty";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "payAccount";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "payDateTime";
                break;
            case 22:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "payType";
                break;
            case 23:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "payTypeSpecified";
                break;
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "postAddress";
                break;
            case 25:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "postType";
                break;
            case 26:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "postTypeSpecified";
                break;
            case 27:
                info.type = Double.class;
                info.name = "refundAmount";
                break;
            case 28:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "refundAmountSpecified";
                break;
            case 29:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "refundTickets";
                break;
            case 30:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "refundTicketsSpecified";
                break;
            case 31:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "seatType";
                break;
            case 32:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "startStation";
                break;
            case 33:
                info.type = Double.class;
                info.name = "totalAmount";
                break;
            case 34:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "totalAmountSpecified";
                break;
            case 35:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "totalTickets";
                break;
            case 36:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "totalTicketsSpecified";
                break;
            case 37:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "trainCode";
                break;
            case 38:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "trainOrderDetail";
                break;
            case 39:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "trainStartTime";
                break;
            case 40:
                info.type = Double.class;
                info.name = "transactionFee";
                break;
            case 41:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "transactionFeeSpecified";
                break;
            case 42:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "userEmail";
                break;
            case 43:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "userMobile";
                break;
            case 44:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "userName";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
